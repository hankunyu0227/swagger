/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.vike.server.ums.api;

import com.vike.server.ums.model.ApiResult;
import com.vike.server.ums.model.UserDetails;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-06-19T11:45:28.038+08:00")

@Api(value = "user", description = "the user API")
public interface UserApi {

    Logger log = LoggerFactory.getLogger(UserApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "新增用户", nickname = "addUser", notes = "", response = Object.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "创建成功", response = Object.class),
        @ApiResponse(code = 405, message = "Invalid input,输入不合法") })
    @RequestMapping(value = "/user",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Object> addUser(@ApiParam(value = "定义一个新的指标" ,required=true )  @Valid @RequestBody UserDetails body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"{}\"", Object.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UserApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "根据指定参数删除用户信息", nickname = "deleteUser", notes = "", response = Object.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "删除成功", response = Object.class),
        @ApiResponse(code = 404, message = "Resource not found,未找到该资源") })
    @RequestMapping(value = "/user",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Object> deleteUser(@NotNull @ApiParam(value = "根据用户名批量删除,多个id用逗号隔开", required = true) @Valid @RequestParam(value = "name", required = true) String name) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"{}\"", Object.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UserApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "查询用户信息", nickname = "getUser", notes = "根据用户提交的参数获取用户信息", response = Object.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "查询成功", response = Object.class),
        @ApiResponse(code = 404, message = "Resource not found,未找到该资源") })
    @RequestMapping(value = "/user",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Object> getUser(
            @ApiParam(value = "返回结果中的记录数而不是实际数据。默认值：false", defaultValue = "false") @Valid @RequestParam(value = "countOutput", required = false, defaultValue="false") Boolean countOutput,
            @ApiParam(value = "返回从第start个位置起始的记录") @Valid @RequestParam(value = "start", required = false) Integer start,
            @ApiParam(value = "限制返回的记录数。") @Valid @RequestParam(value = "limit", required = false) Integer limit,
            @ApiParam(value = "输入查询条件的字段名，多个字段用逗号隔开。") @Valid @RequestParam(value = "key", required = false) String key,
            @ApiParam(value = "输入查询条件的字段值，多个值用逗号隔开。") @Valid @RequestParam(value = "value", required = false) String value,
//            @ApiParam(value = "需要查询的字段集，多个值用逗号隔开。") @Valid @RequestParam(value = "fields", required = false) String fields,
            @ApiParam(value = "为true则根据字段值做模糊查询，类似LIKE %值%；默认为false。searchByAny为true时，该配置时效！", defaultValue = "false") @Valid @RequestParam(value = "search", required = false, defaultValue="false") Boolean search,
            @ApiParam(value = "如果设置为true返回符合filter或search参数中给出的任何条件而不是所有条件的结果。默认值：false。", defaultValue = "false") @Valid @RequestParam(value = "searchByAny", required = false, defaultValue="false") Boolean searchByAny,
            @ApiParam(value = "按给定字段对结果进行排序。") @Valid @RequestParam(value = "sortfield", required = false) String sortfield,
            @ApiParam(value = "排序方式。可能的值有：ASC- 升序;DESC- 下降。") @Valid @RequestParam(value = "sorttype", required = false) String sorttype) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"{}\"", Object.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UserApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "查询用户信息", nickname = "getUserDetails", notes = "根据用户提交的参数获取指标定义信息", response = Object.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "查询成功", response = Object.class),
        @ApiResponse(code = 404, message = "Resource not found,未找到该资源") })
    @RequestMapping(value = "/user/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Object> getUserDetails(@ApiParam(value = "用户id",required=true) @PathVariable("userId") String userId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"{}\"", Object.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UserApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "更新用户信息", nickname = "updateUser", notes = "", response = Object.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "修改成功", response = Object.class),
        @ApiResponse(code = 404, message = "Resource not found,未找到该资源"),
        @ApiResponse(code = 405, message = "Invalid input,输入不合法") })
    @RequestMapping(value = "/user",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Object> updateUser(@ApiParam(value = "修改指标定义中的信息" ,required=true )  @Valid @RequestBody UserDetails body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"{}\"", Object.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UserApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
